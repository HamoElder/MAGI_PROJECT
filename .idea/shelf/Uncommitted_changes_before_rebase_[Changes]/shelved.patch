Index: src/test/scala/magiRF/top/LoopBackTest.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package magiRF.top\n\nimport magiRF.packages.PackageGen.StreamPkgGen\nimport magiRF.top.RFBench.Config.{axiLite4_config, codedDataType, genDemodulatorConfig, genPhyPkgConfig, interfaceIQDataType, phyDataType, power_adjustor_config, rf_payload_upper_boundary, rx_package_data_type, stream_config}\nimport magiRF.top.RFBench.Receiver.RX\nimport magiRF.top.RFBench.Transmitter.TX\nimport spinal.core._\nimport spinal.lib._\nimport utils.bus.AxiLite.{AxiLite4, AxiLite4SlaveFactory, AxiLite4SpecRenamer}\nimport utils.bus.AxiStream4.{AxiStream4, AxiStream4SpecRenamer, AxiStream4X}\n\ncase class LoopBackTest() extends Component {\n    val io = new Bundle {\n        val axil4Ctrl = slave(AxiLite4(axiLite4_config))\n        val trans_data = slave(AxiStream4(stream_config))\n        val result_data = master(Stream(Fragment(phyDataType)))\n        //      val recv_data = master(AxiStream4(stream_config))\n    }\n    noIoPrefix()\n    AxiStream4SpecRenamer(io.trans_data)\n    //  AxiStream4SpecRenamer(io.recv_data)\n    AxiLite4SpecRenamer(io.axil4Ctrl)\n\n    val axil4busCtrl: AxiLite4SlaveFactory = new AxiLite4SlaveFactory(io.axil4Ctrl).setName(\"\")\n    val axi4_stream_fifo = StreamFifo(AxiStream4X(stream_config), 256)\n    axi4_stream_fifo.io.push << io.trans_data.stream\n    val stream_package_gen = StreamPkgGen(genPhyPkgConfig)\n    stream_package_gen.io.raw_data.stream << axi4_stream_fifo.io.pop\n    val trans_fifo = StreamFifo(\n        Fragment(phyDataType),\n        16\n    )\n    trans_fifo.io.push << stream_package_gen.io.pkg_data\n    val transmitter = TX()\n    transmitter.io.raw_data << trans_fifo.io.pop\n    val trans_to_recv_fifo = StreamFifo(interfaceIQDataType, 1024)\n    trans_to_recv_fifo.io.push << transmitter.io.rf_data\n    val receiver = RX()\n    trans_to_recv_fifo.io.pop.ready := True\n    receiver.io.raw_data.payload := trans_to_recv_fifo.io.pop.valid ? trans_to_recv_fifo.io.pop.payload | trans_to_recv_fifo.io.pop.payload.getZero\n    receiver.io.raw_data.valid := True\n    io.result_data << receiver.io.result_data\n    val pkg_gen_bridge = stream_package_gen.driveFrom(axil4busCtrl, 0x00, this.clockDomain, this.clockDomain)\n    val transmitter_bridge = transmitter.driveFrom(axil4busCtrl, 0x10, this.clockDomain, this.clockDomain)\n    val receiver_bridge = receiver.driveFrom(axil4busCtrl, 0x40, this.clockDomain, this.clockDomain)\n    axil4busCtrl.printDataModel()\n}\n\n\nobject LoopBackTestSimApp extends App {\n\n    import spinal.core.sim._\n    import utils.bus.AxiLite.sim.AxiLite4Driver\n\n    SimConfig\n        .withWave\n        .allOptimisation\n        .doSim(new LoopBackTest()) { dut =>\n            dut.clockDomain.forkStimulus(5)\n            dut.io.trans_data.stream.valid #= false\n            dut.io.trans_data.stream.last #= false\n            dut.io.result_data.ready #= true\n            val aliteDrv = AxiLite4Driver(dut.io.axil4Ctrl, dut.clockDomain)\n            aliteDrv.reset()\n            dut.clockDomain.waitSampling(1)\n            aliteDrv.write(0x00, rf_payload_upper_boundary)\n            aliteDrv.write(0x10, 0x0)\n            aliteDrv.write(0x14, 2)\n            aliteDrv.write(0x18, 16)\n            aliteDrv.write(0x10, 0x1)\n            aliteDrv.write(0x20, 0x1)\n            aliteDrv.write(0x40, 0x0)\n            aliteDrv.write(0x44, 0x1)\n            aliteDrv.write(0x48, 3488428)\n            aliteDrv.write(0x4C, 16)\n            for (idx <- 0 until 2) {\n                dut.io.trans_data.stream.valid #= true\n                dut.io.trans_data.stream.ready #= true\n                dut.io.trans_data.stream.data #= idx\n                dut.io.trans_data.stream.keep_ #= 15\n                dut.clockDomain.waitSampling(1)\n            }\n            dut.io.trans_data.stream.last #= true\n            dut.io.trans_data.stream.valid #= true\n            dut.io.trans_data.stream.data #= 0x03020100\n            dut.io.trans_data.stream.keep_ #= 7\n            dut.clockDomain.waitSampling(1)\n            dut.io.trans_data.stream.last #= false\n            dut.io.trans_data.stream.valid #= false\n            dut.clockDomain.waitSampling(2000)\n            /**\n             * Next Package\n             */\n            for (idx <- 0 until 10) {\n                dut.io.trans_data.stream.valid #= true\n                dut.io.trans_data.stream.ready #= true\n                dut.io.trans_data.stream.data #= idx\n                dut.io.trans_data.stream.keep_ #= 15\n                dut.clockDomain.waitSampling(1)\n            }\n            dut.io.trans_data.stream.last #= true\n            dut.io.trans_data.stream.valid #= true\n            dut.io.trans_data.stream.data #= 0x03020100\n            dut.io.trans_data.stream.keep_ #= 7\n            dut.clockDomain.waitSampling(1)\n            dut.io.trans_data.stream.last #= false\n            dut.io.trans_data.stream.valid #= false\n\n            dut.clockDomain.waitSampling(3100)\n        }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/scala/magiRF/top/LoopBackTest.scala b/src/test/scala/magiRF/top/LoopBackTest.scala
--- a/src/test/scala/magiRF/top/LoopBackTest.scala	(revision 0240102a76eecaa6bbac330dce402f7991dcd343)
+++ b/src/test/scala/magiRF/top/LoopBackTest.scala	(date 1652193830100)
@@ -106,7 +106,7 @@
             dut.io.trans_data.stream.last #= false
             dut.io.trans_data.stream.valid #= false
 
-            dut.clockDomain.waitSampling(3100)
+            dut.clockDomain.waitSampling(2100)
         }
 }
 
